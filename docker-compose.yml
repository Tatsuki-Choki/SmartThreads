version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: smartthreads-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-smartthreads}
      POSTGRES_USER: ${DATABASE_USER:-smartthreads_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=ja_JP.UTF-8"
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-smartthreads_user}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - smartthreads-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: smartthreads-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - smartthreads-network

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: smartthreads-minio
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${S3_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${S3_SECRET_KEY:-minioadmin}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - smartthreads-network

  # Backend API
  backend:
    build:
      context: ./smartthreads-backend
      dockerfile: Dockerfile
    container_name: smartthreads-backend
    restart: unless-stopped
    env_file:
      - .env
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_HOST: postgres
      REDIS_HOST: redis
      S3_ENDPOINT: http://minio:9000
    ports:
      - "${PORT:-3000}:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - ./smartthreads-backend:/app
      - /app/node_modules
    command: npm run start:dev
    networks:
      - smartthreads-network

  # Frontend Application
  frontend:
    build:
      context: ./smartthreads-frontend
      dockerfile: Dockerfile
    container_name: smartthreads-frontend
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      NEXT_PUBLIC_API_URL: http://backend:3000
    ports:
      - "3001:3000"
    depends_on:
      - backend
    volumes:
      - ./smartthreads-frontend:/app
      - /app/node_modules
      - /app/.next
    command: npm run dev
    networks:
      - smartthreads-network

  # Queue Worker
  worker:
    build:
      context: ./smartthreads-backend
      dockerfile: Dockerfile
    container_name: smartthreads-worker
    restart: unless-stopped
    env_file:
      - .env
    environment:
      NODE_ENV: ${NODE_ENV:-development}
      DATABASE_HOST: postgres
      REDIS_HOST: redis
      S3_ENDPOINT: http://minio:9000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./smartthreads-backend:/app
      - /app/node_modules
    command: npm run worker
    networks:
      - smartthreads-network

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: smartthreads-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled
      - ./nginx/ssl:/etc/nginx/ssl
      - ./smartthreads-frontend/.next/static:/usr/share/nginx/html/_next/static
    depends_on:
      - backend
      - frontend
    networks:
      - smartthreads-network
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  smartthreads-network:
    driver: bridge